const express = require("express");
const http = require("http");
const path = require("path");
const fs = require("fs");
const bcrypt = require("bcrypt");
const crypto = require("crypto");
const { Server } = require("socket.io");
const { sequelize, User } = require("./db");
const { UserRoom } = require("./room-data");
const { where } = require("sequelize");

const filePath = path.join(__dirname, "users.json");
if (!fs.existsSync(filePath)) fs.writeFileSync(filePath, "[]", "utf8");
let users = JSON.parse(fs.readFileSync(filePath, "utf8"));
const username = users.length > 0 ? users[users.length - 1].username : null;

const app = express();
const server = http.createServer(app);
let list = 0
function getPrivateRoomId(user1, user2) {
  const sorted = [user1, user2].sort().join("_");
  return crypto.createHash("sha256").update(sorted).digest("hex");
}
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
const io = new Server(server);

sequelize.authenticate()
  .then(() => console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"))
  .catch((err) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", err.message));

app.use(express.static(path.join(__dirname, "content")));

app.get("/", (req, res) => res.sendFile(path.join(__dirname, "content", "auth.html")));
app.get("/enter",(req,res)=> res.sendFile(path.join(__dirname,"content","user-enter.html")))
app.get("/create", (req, res) => res.sendFile(path.join(__dirname, "content", "create-room.html")));
app.get("/chat", (req, res) => res.sendFile(path.join(__dirname, "content", "home.html")));
app.get("/api/users", (req, res) => res.sendFile(filePath));
app.get("/messages",(req,res)=>{res.sendFile(path.join(__dirname,"content","messages.html"))});
app.get("/us_profile", (req, res) => res.sendFile(path.join(__dirname, "content", "user-profile.html")));
app.get("/search",(req,res)=>res.sendFile(path.join(__dirname,"content","search.html")));
app.post("/api/login-or-register", async (req, res) => {
  try {
    const { name, password } = req.body;

    if (!name || !password) {
      return res.status(400).json({ success: false, message: "–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø–∞—Ä–æ–ª—å" });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    let user = await User.findOne({ where: { name } });

    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const match = await bcrypt.compare(password, user.pass);
      if (!match) {
        return res.status(401).json({ success: false, message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
      }

      console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–π—à–æ–≤: ${name}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ users.json
      users.push({
        username: name,
        createdAt: new Date().toISOString(),
        savedRooms: [],
        mainRooms: [],
        userFriends: []
      });
      fs.writeFileSync(filePath, JSON.stringify(users, null, 2));

      return res.json({ success: true });
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hashedPassword = await bcrypt.hash(password, 10);

      const newUser = await User.create({
        name,
        pass: hashedPassword,
        status: "user",
        date: new Date()
      });

      users.push({
        username: name,
        createdAt: new Date().toISOString(),
        savedRooms: [],
        mainRooms: [],
        userFriends: []
      });
      fs.writeFileSync(filePath, JSON.stringify(users, null, 2));

      console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${name}`);
      return res.json({ success: true });
    }
  } catch (err) {
    console.error("‚ùå Login/Register error:", err);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/check-user/:name", async (req, res) => {
  const username = req.params.name.trim();
  if (!username) return res.json({ exists: false });

  try {
    const user = await User.findOne({ where: { name: username } });
    res.json({ exists: !!user });
  } catch (err) {
    console.error("‚ùå Error checking user:", err);
    res.status(500).json({ exists: false, error: "Server error" });
  }
});

app.get("/main",(req,res)=>{
  const roomName = req.query.room; 
  if (!roomName) {
    return res.send("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞");
  }

  console.log("‚û° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∫–æ–º–Ω–∞—Ç—É:", roomName);

  res.sendFile(path.join(__dirname, "content", "chat.html"));
})
app.get("/your",(req,res)=>{
  // const chatName = req.query.name;
  // if (!chatName) {
  //   return res.send("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞");
  // }

  // console.log("‚û° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –∫–æ–º–Ω–∞—Ç—É:", chatName);

  res.sendFile(path.join(__dirname, "content", "chat.html"));
});
io.on("connection", (socket) => {
  console.log("üîå –ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è:", socket.id);
  
  socket.on("joinRoom", (roomName) => {
    if (!roomName) return;
    socket.join(roomName);
    socket.roomName = roomName; 

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ –∫–æ–º–Ω–∞—Ç—É: ${roomName}`);
    socket.emit("message", `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É ${roomName}`);
  });
  socket.on("login", (username) => {
    socket.username = username;
  });

  socket.on("add message", (msg) => {
    console.log(msg)
    
    socket.emit("add mess", { msg });
  });
  
  const currentUser = users.length > 0 ? users[users.length - 1].username : null;

  socket.on("add friend", ({ name }) => {
    try {
      if (!currentUser) {
        socket.emit("friend error", "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
        return;
      }

      const userIndex = users.findIndex(u => u.username === currentUser);
      if (userIndex === -1) {
        socket.emit("friend error", "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      if (!users[userIndex].userFriends) {
        users[userIndex].userFriends = [];
      }

      if (users[userIndex].userFriends.includes(name)) {
        socket.emit("friend error", "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö");
        return;
      }

      users[userIndex].userFriends.push(name);
      fs.writeFileSync(filePath, JSON.stringify(users, null, 2));

      console.log(`‚úÖ ${currentUser} –¥–æ–±–∞–≤–∏–ª –¥—Ä—É–≥–∞ ${name}`);
      socket.emit("friend added", name);
    } catch (err) {
      console.error("‚ùå Error adding friend:", err);
      socket.emit("friend error", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
  });
  socket.on("show rooms",()=>{
    try {
      const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
      const currentUser = usersData[usersData.length - 1]; // –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ—à–µ–¥—à–∏–π

      const rooms = currentUser.mainRooms || [];
      console.log("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:", rooms);
    
      socket.emit("rooms",(rooms));
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:", err);
      socket.emit("rooms", []);
    }
  })
  socket.on("del account",()=>{
    const username = users.length > 0 ? users[users.length - 1].username : null;
    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
    const currentUser = usersData[usersData.length - 1]; 

    const index = usersData.findIndex(u => u.username === username);
    
    if (!username) {
      socket.emit("user del");
      return;
    }
    try{
      User.destroy({where:{name:"Stas"},
        attributes:["name"],
      });
      if (index !== -1) {
        usersData.splice(index, 1);
        fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2));
        console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${username} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ users.json`);
      }
      console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π:", username);
      socket.emit("user del");
    }catch(err){
      console.log(err);
    }
    
  });

  socket.on("register", async ({ name, password,language }) => {
    console.log("‚û° –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:", name);
    if (users.some(u => u.username === name)) {
      socket.emit("useRegister");
      return;
    }
    try {
      const newUser = await User.create({
        name,
        pass: password,
        status: "user",
        date: new Date(),
        language: language
      });

      users.push({ username: name, pass: password, createdAt: new Date().toISOString(),language:language,savedRooms:[],mainRooms:[],userFriends:[] });
      fs.writeFileSync(filePath, JSON.stringify(users, null, 2));

      console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:", name);

      socket.emit("registerSuccess", name);
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
      socket.emit("registerError", "Validation error");
    }
  });
  socket.on("get user-name",()=>{
    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
    const username = usersData.length > 0 ? usersData[usersData.length - 1].username : null;
    socket.emit("set name",username);
  });
  socket.on("getRooms", async (room) => {
    console.log("‚û° –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫—ñ–º–Ω–∞—Ç");
    try {
      const rooms = await UserRoom.findAll({
        attributes: ["room_name", "description"], 
        raw: true
      });
      rooms.push(room)
      socket.emit("roomsList", rooms);
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç:", err);
      socket.emit("roomsList", []);
    }
  });

  socket.on("createRoom", async ({ roomName, roomDescription }) => {
    if (!roomName || !roomDescription) {
      socket.emit("createRoomError", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è");
      return;
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON –ø–æ –∏–º–µ–Ω–∏, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –≤ —Å–æ–∫–µ—Ç–µ
      const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
      const currentUser = usersData.find(u => u.username === socket.username);

      if (!currentUser) {
        socket.emit("createRoomError", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
        return;
      }

      const newRoom = await UserRoom.create({
        room_name: roomName,
        description: roomDescription,
        user_name: currentUser.username, // –∏–º—è –∏–∑ JSON
        date: new Date()
      });

      console.log("‚úÖ –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:", newRoom.toJSON());

      if (!currentUser.mainRooms) currentUser.mainRooms = [];
      currentUser.mainRooms.push(roomName);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π JSON
      fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2));

      socket.emit("createRoomSuccess", newRoom);
      io.emit("newRoom", newRoom);
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:", err);
      socket.emit("createRoomError", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏");
    }
  });

  socket.on("show friends", () => {
    try {
      const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
      const currentUser = usersData[usersData.length - 1]; // –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ—à–µ–¥—à–∏–π
      const friends = currentUser.userFriends || [];
      // const rooms = currentUser.savedRooms || [];
      console.log("üìã –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:", friends);
    
      socket.emit("friends",(friends));
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:", err);
      socket.emit("friends", []);
    }
  });
  socket.on("save profile", ({ name, bio }) => {
    if (!name) {
      socket.emit("profile error", "–Ü–º'—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
      return;
    }

    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));

    // –∏—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ socket.username
    const currentIndex = usersData.findIndex(u => u.username === socket.username);

    if (currentIndex === -1) {
      socket.emit("profile error", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
      return;
    }

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –Ω–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º
    const nameTaken = usersData.some(
      (u, i) => i !== currentIndex && u.username === name
    );

    if (nameTaken) {
      socket.emit("profile error", "–¢–∞–∫–µ —ñ–º'—è –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è");
      return;
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º
    usersData[currentIndex].username = name;
    usersData[currentIndex].bio = bio || "";

    fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2));

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    socket.username = name;

    socket.emit("profile saved", {
      name,
      bio: usersData[currentIndex].bio
    });
  });
  socket.on("get hash",(friend,me)=>{
    const hash = getPrivateRoomId(friend,me);
    socket.emit("set hash",hash);
  });
  socket.on("add to main room",(room)=>{
    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
    const currentUser = usersData[usersData.length - 1];

    if (!currentUser.mainRooms) currentUser.mainRooms = [];
    currentUser.mainRooms.push(room);

    fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2));
  })

  socket.on("del user",()=>{
    console.log("Del-user")
    User.destroy({where:{username},
      attributes:["useraname"],
    });
  })
  socket.on("createRoom", async ({ roomName, roomDescription }) => {
    if (!roomName || !roomDescription) {
        socket.emit("createRoomError", "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è");
        return;
    }
    const room = await UserRoom.findOne({ where: { room_name: roomName } });
    if (room) {
      socket.emit("createRoomError", "–ö—ñ–º–Ω–∞—Ç–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ users.json
    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
    if (!usersData.length) {
      socket.emit("createRoomError", "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ó–∞–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.");
      return;
    }
    const lastUser = usersData[usersData.length - 1];
    const username = lastUser.username;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ mainRooms –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!lastUser.mainRooms) lastUser.mainRooms = [];
    lastUser.mainRooms.push(roomName);
    fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2));

    const newRoom = await UserRoom.create({
      user_name: username, 
      room_name: roomName,
      description: roomDescription,
      date: new Date()
    });{
        socket.emit("createRoomError", "–ö—ñ–º–Ω–∞—Ç–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î");
        return;
    };
  });
  socket.on("set zero", () => {
    list = 0;
    console.log("üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –∫–æ–º–Ω–∞—Ç—ã");
  });
  socket.on("get language",()=>{
    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
    const currentUser = usersData[usersData.length - 1]; 
    const language = currentUser.language || "en"; 
    socket.emit("set language", language);
  });
  socket.on("get user name",()=>{
    const usersData = JSON.parse(fs.readFileSync(filePath, "utf8"));
    const currentUser = usersData[usersData.length - 1]; 
    const username = currentUser.username || "User"; 
    console.log(username);
    socket.emit("set username", username);
  })
  socket.on("set one", () => {
    list = 1;
    console.log("üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");
  });

  socket.on("go search", async ({ search }) => {
    console.log("Search:", search);

    const { Op } = require("sequelize");

    if (list === 0) {
      // –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç
      try {
        const results = await UserRoom.findAll({
          where: {
            [Op.or]: [
              { room_name: { [Op.like]: `%${search}%` } },
              { description: { [Op.like]: `%${search}%` } }
            ]
          },
          attributes: ["room_name", "description"],
          raw: true
        });
        socket.emit("search result", results, list);
      } catch (err) {
        console.error("‚ùå Search error:", err);
        socket.emit("search result", [], list);
      }
    } else {
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      try {
        const results = await User.findAll({
          where: { name: { [Op.like]: `%${search}%` } },
          attributes: ["name"],
          raw: true
        });
        socket.emit("search result", results, list);
      } catch (err) {
        console.error("‚ùå Search error:", err);
        socket.emit("search result", [], list);
      }
    }
  });

});

server.listen(5050, () => {
  console.log("üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:5050");
  const result = getPrivateRoomId("Liza","Stas");
  console.log(`Result: ${result}`);
});
// Result: 58b372b709cfda0fb272d736895956b5ec88c70112add7b938f7bbeb9a235e48